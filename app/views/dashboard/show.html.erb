<div class="mt-4" id="visualize">
    <h3>Data Configuration</h3>
    <div class="ui form row">
        <div class="field col-md-3">
          <label>Level</label>
          <select multiple="" class="ui dropdown" v-model="filter.level">
            <option value="">All</option>
            <option v-for="l in levels" v-bind:value="l">{{l}}</option>
          </select>
        </div>
        <div class="field col-md-3">
          <label>Method</label>
          <select multiple="" class="ui dropdown" v-model="filter.method">
            <option value="">All</option>
            <option v-for="m in methods" v-bind:value="m">{{m}}</option>
          </select>
        </div>
        <div class="field col-md-3">
          <label>Path</label>
          <select multiple="" class="ui dropdown" v-model="filter.path">
            <option value="">All</option>
            <option v-for="p in paths" v-bind:value="p">{{p}}</option>
          </select>
        </div>
      <div class="field col-md-3">
        <label>Code</label>
        <select multiple="" class="ui dropdown" v-model="filter.code">
          <option value="">All</option>
          <option v-for="c in codes" v-bind:value="c">{{c}}</option>
        </select>
      </div>
      <div class="field col-md-3">
        <label>Data Precision</label>
        <select class="ui dropdown" v-model="dataPrecision">
          <option value="minute">Minute</option>
          <option value="hour">Hour</option>
          <option value="day">Day</option>
          <option value="month">Month</option>
          <option value="year">Year</option>
        </select>
      </div>
    </div>
    <h3>View Configuration</h3>

      <div class="ui form row">
        <div class="field col-md-3">
          <label>View Unit</label>
          <select class="ui dropdown" v-model="viewUnit">
            <option value="minute">Minute</option>
            <option value="hour">Hour</option>
            <option value="day">Day</option>
            <option value="week">Week</option>
            <option value="month">Month</option>
            <option value="year">Year</option>
          </select>
        </div>
        <div class="field col-md-3">
          <label>Range</label>
          <input type="number" v-model="range">
        </div>
      </div>
  <canvas id="visualize_chart"></canvas>
  <div class="form-group">

  </div>
</div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.20.1/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.js"></script>
<script type="text/javascript" charset="utf-8">

  var visualize = new Vue({
      el: '#visualize',
      data: {
          levels: <%= raw(@collection.distinct("level").to_json) %>,
          methods: <%= raw(@collection.distinct("method")) %>,
          paths: <%= raw(@collection.distinct("path")) %>,
          codes: <%= raw(@collection.distinct("code")) %>,
          filter: {level: [], method: [], code: [], path: []},
          dataPrecision: 'hour',
          viewUnit: 'hour',
          range: 12,
          result: <%= raw (@collection.aggregate([{'$group' => {_id: {'$dateToString'=> {format: '%Y-%m-%dT%H:%M:%SZ' ,date: {'$dateFromString'=> {dateString: '$timestamp'} } } }, count: {'$sum'=> '$count'}}}, {'$sort' => {'_id': 1}}]).to_json) %>,
      },
      methods: {
          updateViewUnit: function() {
              this.chart.options.scales.xAxes[0].time.unit = this.viewUnit;
          },
          updateRange: function() {
              this.chart.options.scales.xAxes[0].time.max = moment().add(3, this.viewUnit+'s').startOf(this.viewUnit)
              this.chart.options.scales.xAxes[0].time.min = moment().subtract(this.range, this.viewUnit+'s').startOf(this.viewUnit)
          },
          updateData: function() {
              let dataMap = {};
              let start = moment().subtract(this.range, this.viewUnit+'s').startOf(this.viewUnit)
              while (start.isSameOrBefore(moment())) {
                  dataMap[start.format("YYYY-MM-DDTHH:mm:SSZ")]= 0;
                  start.add(1, this.dataPrecision+'s')
              }
              for (var i = 0; i < this.result.length; i++) {
                  dataMap[moment(this.result[i]._id).format("YYYY-MM-DDTHH:mm:SSZ")] = this.result[i].count
               }
              const ordered = {};
              Object.keys(dataMap).sort().forEach(function(key) {
                  ordered[key] = dataMap[key];
              });
              dataMap = ordered;
              keys = Object.keys(dataMap)
              vals = Object.values(dataMap)
              console.log(keys, vals)
              this.chart.data.labels = keys
              this.chart.data.datasets[0].data = vals
          },
          updateAll: function() {
              this.updateViewUnit();
              this.updateRange();
              this.updateData();
              this.chart.update()
          }

      },
      watch: {
          viewUnit: function() {
              this.updateAll()
          },

          range: function() {
              this.updateAll()
          },
      }
  });

  let ctx= document.getElementById('visualize_chart').getContext("2d")
  let config = {
      type: 'line',
      data: {
          labels: [],
          datasets: [{
              lineTension: 0,
              spanGaps: false,
              label: 'Data',
              data: [],
              borderWidth: 1,
              borderColor: 'rgba(34,204,10,1)',
              fillColor: 'rgba(34,204,10,0.2)',
              fill: false,

          }]
      },
      options: {
          elements: {
              point: { radius: 0 }
          },
          scales: {
              xAxes: [{
                  type: 'time',
                  distribution: 'series',
                  ticks: {
                      source: 'labels'
                  },
                  time: {
                      unit: visualize.viewUnit,
                      displayFormats: {
                          week: 'DD MMM',
                          day: 'DD MMM',
                          hour: 'HH:mm',
                          minute: 'HH:mm'
                      },
                      max: moment(),
                      min: moment().subtract(visualize.range, visualize.viewUnit+'s')

                  }
              }],
              yAxes: [{
                  ticks: {
                      beginAtZero: true
                  }
              }]
          },
      }
  };
  visualize.chart = new Chart(ctx, config);
  visualize.updateAll()
</script>